<?xml version="1.0"?>
<ScatterFile xmlns="http://schemas.microsoft.com/netmf/ScatterfileSchema.xsd">

    <!-- STM32L4 with 1M Flash, 128k SRAM, and 64k DATA CCM -->

    <Set Name="Valid" Value="false"/>

    <!-- ################################################################################ -->

    <!-- Memory Region base and size values for physical hardware to help clarify the mapping
         by making Symbolic names available instead of a bunch of numbers. These values are
         fixed in hardware and therefore, don't change.
    -->
    <!-- Internal FLASH -->
    <Set Name="IFLASH_BaseAddress"      Value="0x08000000"/>
    <Set Name="IFLASH_Size"             Value="0x00100000"/><!-- 1MB -->

    <!-- Internal Core Coupled Memory (CCM) [D-Bus] -->
    <Set Name="CCM_BaseAddress"         Value="0x10000000"/>
    <Set Name="CCM_Size"                Value="0x00010000"/><!-- 64KB -->

    <!-- Internal SRAM -->
    <Set Name="IRAM_BaseAddress"        Value="0x20000000"/>
    <Set Name="IRAM_Size"               Value="0x00020000"/><!-- 128KB -->

    <!-- Solution specific usage settings -->

    <!-- Internal FLASH -->
    <!--
         The flash memory layout must match BlockRange definitions
         in DeviceCode\Blockstorage\STM32L4\STM32L4_BlConfig.cpp
    -->
    <!-- TinyBooter sits at power on Reset vector-->
    <Set Name="BooterCode_BaseAddress"  Value="%IFLASH_BaseAddress%"/>
    <Set Name="BooterCode_Size"         Value="0x0000C000"/><!-- 48KB -->

    <Set Name="Code_BaseAddress"        Value="%BooterCode_BaseAddress%"/>
    <Set Name="Code_Size"               Value="%BooterCode_Size%"/>

    <!-- Internal CCM (D-Bus) -->
    <!-- Put Stack in CCM for high speed access, reducing overhead of stack usage -->
    <Set Name="Stack_Bottom"            Value="%CCM_BaseAddress%"/>

    <!-- Internal SRAM -->
    <!-- FIXME: Dynamically after RAM_RW region, properly aligned. -->
    <Set Name="Heap_BaseAddress"        Value="0x20008000"/>
    <Set Name="Heap_Size"               Value="0x00017000"/><!-- 92K -->

    <Set Name="CustomHeap_Size"         Value="0x00001000"/><!--  4K -->


    <If Name="TARGETLOCATION" Value="FLASH">
        <Set Name="Valid"               Value="true"/>
    </If>

    <!-- ################################################################################ -->

    <If Name="Valid" Value="false">
        <Error Message="Configuration not recognized"/>
    </If>

    <LoadRegion Name="LR_%TARGETLOCATION%" Base="%Code_BaseAddress%" Options="ABSOLUTE" Size="%Code_Size%">

        <!-- ========= INTERNAL FLASH ============================================ -->
        <ExecRegion Name="ER_%TARGETLOCATION%" Base="%Code_BaseAddress%" Options="FIXED" Size="">
            <FileMapping Name="*" Options="(SectionForPowerOnReset, +FIRST)" />
            <FileMapping Name="*" Options="(SectionForBootstrapOperations)" />
            <FileMapping Name="*" Options="(+RO-CODE)" />
            <FileMapping Name="*" Options="(+RO-DATA)" />
        </ExecRegion>

        <!-- ========= INTERNAL RAM ============================================= -->
        <!-- Writeable Vector table -->
        <!-- NOTE:
             Despite what you might hope for, this CANNOT go into the CCM area as the NVIC does not
             have access to that space (it sees the AHB layer and below, rather than the core's D-Bus)
        -->
        <!-- Alignment for the vector table is important to allow the NVIC to decode the proper locations
            (See Section 4.4.4 of the ARM Cortex-M4 Generic User Guide [ ARM DUI 0553A (ID121610) ] )
            Since this starts the SRAM block, it's aligned just fine for any size table.
        -->
        <ExecRegion Name="ER_RAM_RW" Base="%IRAM_BaseAddress%" Options="ABSOLUTE" Size="">
            <FileMapping Name="*" Options="(VectorTable)"/> 
            <FileMapping Name="*" Options="(+RW-DATA, +ZI)" />
        </ExecRegion>

        <ExecRegion Name="ER_RAM_RO" Base="+0" Options="ABSOLUTE" Size="">
            <!-- Flash programming from Flash is safe on STM32 -->
            <!-- No need to place Flash programming code in RAM -->
            <!-- <FileMapping Name="*" Options="(SectionForFlashOperations)" /> -->
        </ExecRegion>

        <ExecRegion Name="ER_HEAP_BEGIN" Base="%Heap_BaseAddress%" Options="ABSOLUTE UNINIT" Size="">
            <FileMapping Name="*" Options="(SectionForHeapBegin)" />
        </ExecRegion>

        <!-- everything between heapbegin and heapend will be allocated for a heap -->

        <ExecRegion Name="ER_HEAP_END" Base="+%Heap_Size%" Options="ABSOLUTE UNINIT" Size="">
            <FileMapping Name="*" Options="(SectionForHeapEnd)" />
        </ExecRegion>

        <ExecRegion Name="ER_CUSTOM_HEAP_BEGIN" Base="+0" Options="ABSOLUTE UNINIT" Size="">
            <FileMapping Name="*" Options="(SectionForCustomHeapBegin)" />
        </ExecRegion>

        <!-- everything between heapbegin and heapend will be allocated for the unmanaged SimpleHeap -->

        <ExecRegion Name="ER_CUSTOM_HEAP_END" Base="+%CustomHeap_Size%" Options="ABSOLUTE UNINIT" Size="">
            <FileMapping Name="*" Options="(SectionForCustomHeapEnd)" />
        </ExecRegion>

        <!-- ========= Internal CCM ============================================ -->
        <ExecRegion Name="ER_STACK_BOTTOM" Base="%Stack_Bottom%" Options="ABSOLUTE UNINIT" Size="">
            <FileMapping Name="*" Options="(SectionForStackBottom)" />
        </ExecRegion>

        <!-- -8 for the two 32bit values in the SectionForStack* sections, This keeps the region
             limit from exceeding the size of physical memory.
        -->
        <ExecRegion Name="ER_STACK_TOP" Base="AlignExpr(+%CCM_Size% -8, 8 )" Options="ABSOLUTE UNINIT" Size="">
            <FileMapping Name="*" Options="(SectionForStackTop +LAST)" />
        </ExecRegion>
    </LoadRegion>
</ScatterFile>
